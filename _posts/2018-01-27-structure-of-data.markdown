---
layout: post
title: The structure of data
date: 2018-01-27 13:32:20 +0300
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: post-6.jpg # Add image post (optional)
tags: [Data, Computer]
author: armyer # Add name author (optional)
---


<h1>数据结构绪论</h1>

> 大纲主体：讲述数据结构的绪论，包括它的定义，三个要素，算法的五大特征。简单的提及算法效率


----------


<h2>定义：</h2>
数据结构即是指相互之间存在一种或多种特定关系的数据元素的集合。在计算机科学中，是指计算机存储，组织数据的方式[1]。

- 通俗的说，计算机的功能就是要处理数据，不论是将数据存储起来，还是进行运算等。而数据结构就是让计算机更好的处理数据从而产生的。


----------


<h2>三大要素：</h2>
数据结构三大要素中的逻辑结构和存储结构是指揭示了计算机是如何存储表示的，而运算则揭示了计算机如何运算的。		

</h3>逻辑结构：</h3>
指数据元素之间的逻辑关系，既然强调的是逻辑，那么必然是较为抽象的概念，用于逻辑理解。而在这逻辑结构又可分为线性结构和非线性结构。线性表是典型的线性结构，树和图为典型的非线性结构。
![逻辑结构的整体结构](http://img.blog.csdn.net/20170810232727186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2MTQ5NDc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

 - 这里只需了解知道数据结构中逻辑结构整体是这样，后续会继续深入介绍理解。


<h3>存储结构：</h3>
是指数据结构在计算机中的表示，也可称为物理结构。强调的是存储，那么必然是可在计算机中实现表示，故而可以用计算机语言进行实现，依赖于计算机语言。
![存储结构的结构图](http://img.blog.csdn.net/20170810233822229?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2MTQ5NDc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

 - 后面将会使用C语言代码一一实现其存储功能。在学习数据结构中，可以动手实践验证是一大特点。


<h3>运算：</h3>
是指施加在数据上的运算包括运算的定义和实现。运算的定义针对逻辑结构，指出运算的功能。运算的实现则是针对存储结构，指出运算的具有操作步骤。


----------


</h2>五大特征：</h2>
是指算法的五个特性，分别是以下：

 1. 有穷性：一个算法必须总是在执行有穷步之后结束，且每一步都可在有穷时间内完成。
 2. 确定性：算法中每一条指令必须有确切的含义，不会产生二义性。
 3. 可行性：一个算法是可行的。即指可以通过已经实现的基本运算执行有限次来实现。
 4. 输入：一个算法有零个或多个的输入，该输入取自某个特定的对象的集合。
 5. 输出：一个算法有一个或多个的输出，该输出是同输入有着某种特定关系的量。
 
 **这里提到算法，就有必要简单的来了解下什么是算法。计算机归根到底就是用于计算的一台机器，我们可以把它想象成一个黑盒子，将我们的数据输入进去，得出来的就是我们所需要的数据。那么在这“黑盒子”里，它是如何处理这些数据的，这里用到的就是称作“算法”的一个玩意，因而，算法就是指对特定问题求解步骤的一种描述就较好理解了。五大特性很好理解，假设我们想让计算机计算1+1，首先，我们得将1和1“输入”，在计算1+1过程中，我们当然希望计算机能够计算出来，那么这个算法就得“可行”，“确定”，并且我们希望它能尽快把结果告诉我们，自然就要“有穷”，最后计算机就可以“输出”结果了。**

 

<h2>算法效率</h2>

<h3>时间复杂度：</h3>
一个语句的频度是指该语句在算法中被重复执行的次数。算法中所有频度之和记作T(n)，而时间复杂度主要就是用来分析T(n)的数量级。算法的时间复杂度记为O(n)=O(f(n))。
**严格的数学定义：若T(n)和f(n)是定义在正整数集合上的两个函数，则存在正常书C和n0，使得当n>n0时候，都满足0≤T(n) ≤C*f(n)**
<h4>最坏时间复杂度：在最坏情况下，算法的时间复杂度</h4>
<h4>最好时间复杂度：在最好情况下，算法的时间复杂度</h4>
<h4>平均时间复杂度：是指在所有可能输出入实例等概率出现情况下，算法的期望运行时间</h4>
**加法规则：T(n)=T1(n)+T2(n)=O(f(n)+O(g(n))=O(max(f(n),g(n))**
**乘法规则：T(n) = T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n))**
**常见的渐近时间复杂度：![时间复杂度](http://img.blog.csdn.net/20170811094757528?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2MTQ5NDc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)**


<h3>空间复杂度：</h3>
算法的空间复杂度记为S(n)，指该算法所耗费的存储空间，它是问题规模n的函数，渐近空间复杂度也称为空间复杂度，记作S(n)=O(g(n))。若输入数据所占空间只取决于问题本身，和算法无关，则只需分析输入和程序之外的额外空间。


[1]:(https://zh.wikipedia.org/wiki/数据结构)
